<languageVersion : 1.0;>
//มมนโ
kernel vividLight
<   namespace : "CustomFilter";
    vendor : "Nicho";
    version : 1;
>
{
    input image4 background;
    input image4 foreground;
    
    parameter float2 pos
    <
        defaultValue:float2(0.0, 0.0); 
    >;
    parameter float4 rect<
        defaultValue:float4(0.0, 0.0, 0.0, 0.0); 
    >;
    parameter float alpha<
        defaultValue:float(1.0);
        maxValue:float(1.0);
        minValue:float(0.0);
    >;
    output pixel4 dst;

    void
    evaluatePixel()
    {
        float2 tp = outCoord();
        float2 sp = tp - pos;
        
        if(sp.x >= rect.x && sp.y >= rect.y && sp.x < rect.z && sp.y < rect.w){
            float4 back = sampleNearest(background, outCoord());
            float4 fore = sampleNearest(foreground, outCoord());
            float3 mixColor;
            
            if(fore.r <= 0.5){
                if(fore.r > 0.0){
                    mixColor.r = 1.0-(1.0-back.r)/ (2.0 * fore.r);
                }else{
                    mixColor.r = 0.0;
                }
            }else{
                if(fore.r < 1.0){
                    mixColor.r = back.r/(2.0 * (1.0-fore.r));
                }else{
                    mixColor.r = 1.0;
                }
            }
            
            if(fore.g <= 0.5){
                if(fore.g > 0.0){
                    mixColor.g = 1.0-(1.0-back.g)/ (2.0 * fore.g);
                }else{
                    mixColor.g = 0.0;
                }
            }else{
                if(fore.g < 1.0){
                    mixColor.g = back.g/(2.0 * (1.0-fore.g));
                }else{
                    mixColor.g = 1.0;
                }
            }
            
            if(fore.b <= 0.5){
                if(fore.b > 0.0){
                    mixColor.b = 1.0-(1.0-back.b)/ (2.0 * fore.b);
                }else{
                    mixColor.b = 0.0;
                }
            }else{
                if(fore.b < 1.0){
                    mixColor.b = back.b/(2.0 * (1.0-fore.b));
                }else{
                    mixColor.b = 1.0;
                }
            }
            
            
            mixColor = clamp(mixColor, 0.0, 1.0);
            dst.rgb = mix(mixColor, back.rgb, 1.0 - (fore.a * alpha));
            
            dst.a = back.a;
        }else{
            dst.rgba = sampleNearest(background, tp);
        }
    }
}
