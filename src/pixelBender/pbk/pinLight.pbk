<languageVersion : 1.0;>
//µã¹â
kernel pinLight
<   namespace : "CustomFilter";
    vendor : "Nicho";
    version : 1;
>
{
    input image4 background;
    input image4 foreground;
    
    parameter float2 pos
    <
        defaultValue:float2(0.0, 0.0); 
    >;
    parameter float4 rect<
        defaultValue:float4(0.0, 0.0, 0.0, 0.0); 
    >;
    parameter float alpha<
        defaultValue:float(1.0);
        maxValue:float(1.0);
        minValue:float(0.0);
    >;
    output pixel4 dst;

    void
    evaluatePixel()
    {
        float2 tp = outCoord();
        float2 sp = tp - pos;
        
        if(sp.x >= rect.x && sp.y >= rect.y && sp.x < rect.z && sp.y < rect.w){
            float4 back = sampleNearest(background, outCoord());
            float4 fore = sampleNearest(foreground, outCoord());
            
            float3 mixColor;
            
            if(back.r < 2.0 * fore.r - 1.0){
                mixColor.r = 2.0 * fore.r - 1.0;
            }else if(2.0 * fore.r - 1.0 < back.r && back.r < 2.0 * fore.r){
                mixColor.r = back.r;
            }else if(back.r > 2.0 * fore.r){
                mixColor.r = 2.0 * fore.r;
            }
            
            if(back.g < 2.0 * fore.g - 1.0){
                mixColor.g = 2.0 * fore.g - 1.0;
            }else if(2.0 * fore.g - 1.0 < back.g && back.g < 2.0 * fore.g){
                mixColor.g = back.g;
            }else if(back.g > 2.0 * fore.g){
                mixColor.g = 2.0 * fore.g;
            }
            
            if(back.b < 2.0 * fore.b - 1.0){
                mixColor.b = 2.0 * fore.b - 1.0;
            }else if(2.0 * fore.b - 1.0 < back.b && back.b < 2.0 * fore.b){
                mixColor.b = back.b;
            }else if(back.b > 2.0 * fore.b){
                mixColor.b = 2.0 * fore.b;
            }
            dst.rgb = clamp(dst.rgb, 0.0, 1.0);
            dst.rgb = mix(mixColor, back.rgb, 1.0 - (fore.a * alpha));
            dst.a = back.a;
        }else{
            dst.rgba = sampleNearest(background, tp);
        }
    }}
